# This is a basic workflow to help you get started with Actions

name: Deploy

# Controls when the workflow will run
on:
  push:
    branches: [ "main", "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install packages
        run: sudo apt-get install -y jq

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          lfs: 'true'
      
      # Clone main repo so we can build the indexer utility
      - uses: actions/checkout@v4
        with:
          repository: 'opticfluorine/sovereign'
          path: 'sovereign'

      # Build the indexer utility
      - name: Build indexer
        run: dotnet build sovereign/src/Util/CreateUpdaterResourceSet -c Release 

      # Generate index and release files
      - name: Generate index and release files
        run: dotnet run --project sovereign/src/Util/CreateUpdaterResourceSet -c Release Data

      # Prepare files for deployment
      - name: Deploy files to update server
        env:
          TARGET_HOST: ${{ secrets.TARGET_HOST }}
          TARGET_PORT: ${{ secrets.TARGET_PORT }}
          REMOTE_USER: ${{ github.ref == 'refs/heads/main' && 'deploy-updates' || 'deploy-updates-dev' }}
          TARGET_DIR: ${{ github.ref == 'refs/heads/main' && 'update' || 'update-dev' }}
          DEPLOY_KEY: ${{ github.ref == 'refs/heads/main' && secrets.PROD_DEPLOY_KEY || secrets.DEV_DEPLOY_KEY }}
        run: |
          RELEASE_ID=`jq -r .releaseId release.json`
          mv Data $RELEASE_ID
          echo $DEPLOY_KEY > key
          scp -i key -P $TARGET_PORT $RELEASE_ID $REMOTE_USER@$TARGET_HOST:/var/www/$TARGET_DIR/
          scp -i key -P $TARGET_PORT release.json $REMOTE_USER@$TARGET_HOST:/var/www/$TARGET_DIR/
          rm key
